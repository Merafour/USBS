<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 567]: Last Updated: Thu Apr 09 17:32:16 2015
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[49]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">USB_EndPoint0</a> from usbcore.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[31]">USB_EndPoint2</a> from usbuser.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[24]">USB_IRQHandler</a> from usbhw.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[37]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[90]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[91]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[92]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[93]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[94]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[39]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; enter_usb_isp &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[aa]"></a>__asm___9_sbl_iap_c_crp____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbl_iap.o(.emb_text), UNUSED)

<P><STRONG><a name="[ab]"></a>__asm___9_sbl_iap_c_crp____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbl_iap.o(.emb_text), UNUSED)

<P><STRONG><a name="[84]"></a>boot_jump</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sbl_iap.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>USB_Reset_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>USB_Suspend_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>USB_Resume_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[ac]"></a>USB_EndPoint1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>USB_EndPoint2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>USB_EndPoint3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>USB_EndPoint4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>USB_EndPoint5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>USB_EndPoint6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>USB_EndPoint7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>USB_EndPoint8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>USB_EndPoint9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>USB_EndPoint10</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>USB_EndPoint11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>USB_EndPoint12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>USB_EndPoint13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>USB_EndPoint14</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>USB_EndPoint15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[bf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4a]"></a>USB_GetDescriptor</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[38]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c1]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[87]"></a>SystemInit</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_usb_isp
</UL>

<P><STRONG><a name="[c2]"></a>MSC_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>MSC_GetMaxLUN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>translate_rd</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = translate_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[4d]"></a>MSC_MemoryRead</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_MemoryRead &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[50]"></a>MSC_SetCSW</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[51]"></a>translate_wr</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = translate_wr &rArr; write_flash &rArr; find_erase_prepare_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_user_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[54]"></a>MSC_MemoryWrite</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSC_MemoryWrite &rArr; translate_wr &rArr; write_flash &rArr; find_erase_prepare_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_wr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[56]"></a>MSC_MemoryVerify</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_MemoryVerify &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[57]"></a>MSC_RWSetup</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_RWSetup &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[58]"></a>DataInFormat</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[59]"></a>DataInTransfer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DataInTransfer &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[5a]"></a>MSC_TestUnitReady</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_TestUnitReady &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5b]"></a>MSC_RequestSense</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_RequestSense &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5c]"></a>MSC_Inquiry</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5d]"></a>MSC_ModeSense6</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ModeSense6 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5e]"></a>MSC_ModeSense10</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ModeSense10 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[5f]"></a>MSC_ReadCapacity</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ReadCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[60]"></a>MSC_ReadFormatCapacity</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[61]"></a>MSC_GetCBW</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSC_GetCBW &rArr; MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[45]"></a>MSC_BulkIn</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSC_BulkIn &rArr; MSC_MemoryRead &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[46]"></a>MSC_BulkOut</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[44]"></a>USB_ResetCore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[63]"></a>USB_SetupStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[4b]"></a>USB_DataInStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[64]"></a>USB_DataOutStage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[65]"></a>USB_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[66]"></a>USB_StatusOutStage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[30]"></a>USB_EndPoint0</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>EPAdr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[7a]"></a>WrCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[6f]"></a>WrCmdDat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>

<P><STRONG><a name="[7c]"></a>RdCmdDat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
</UL>

<P><STRONG><a name="[6d]"></a>USB_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[71]"></a>USB_Reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[70]"></a>USB_Init</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_usb_isp
</UL>

<P><STRONG><a name="[72]"></a>USB_Connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_usb_isp
</UL>

<P><STRONG><a name="[c4]"></a>USB_Suspend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>USB_Resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>USB_WakeUp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>

<P><STRONG><a name="[89]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[74]"></a>USB_Configure</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[75]"></a>USB_ConfigEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[67]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[77]"></a>USB_EnableEP</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[78]"></a>USB_DisableEP</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[79]"></a>USB_ResetEP</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[55]"></a>USB_SetStallEP</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_SetStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[6e]"></a>USB_ClrStallEP</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[62]"></a>USB_ReadEP</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[4f]"></a>USB_WriteEP</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[7b]"></a>USB_GetFrame</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[24]"></a>USB_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend_Event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume_Event
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>enable_interrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbl_iap.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>iap_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbl_iap.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>disable_interrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbl_iap.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>write_data</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sbl_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[80]"></a>prepare_sector</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sbl_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_erase_prepare_sector
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_user_flash
</UL>

<P><STRONG><a name="[81]"></a>erase_sector</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sbl_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_erase_prepare_sector
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_user_flash
</UL>

<P><STRONG><a name="[7f]"></a>find_erase_prepare_sector</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sbl_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_erase_prepare_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[53]"></a>write_flash</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sbl_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_flash &rArr; find_erase_prepare_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_erase_prepare_sector
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_wr
</UL>

<P><STRONG><a name="[83]"></a>execute_user_code</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sbl_iap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_isp_entry_pin
</UL>

<P><STRONG><a name="[88]"></a>user_code_present</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sbl_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_code_present
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>check_isp_entry_pin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sbl_iap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>erase_user_flash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sbl_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_user_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_wr
</UL>

<P><STRONG><a name="[c9]"></a>Prepare_Zero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>Prepare_Copy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>enter_usb_isp</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enter_usb_isp &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main &rArr; enter_usb_isp &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_usb_isp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_isp_entry_pin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_present
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[68]"></a>USB_GetStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[69]"></a>USB_SetClrFeature</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[6a]"></a>USB_SetConfiguration</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_SetConfiguration &rArr; USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[6c]"></a>USB_SetInterface</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_SetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
